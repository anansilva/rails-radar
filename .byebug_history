continue
next
quit
qiut
types = params[:ngo][:type_ids]
params.require(:ngo).permit(:type_ids)
params[:ngo]
size
types
NgoType.create(ngo_id: @ngo.id, type_id: 6)
NgoType.create(ngo_id: @ngo.id, type_id: 6
@ngo.errors
continue
params[:ngo][:type_ids]
continue
params[:ngo][:type_ids]
exit
params[:ngo][:type_ids].last
params[:ngo][:type_ids].first
params[:ngo][:type_ids].compact
params[:ngo][:type_ids]
params[:ngo]
params
ngo_params
@ngo
continue
@donation.errors
@donation.save
quit
@@receiver
quit
@receiver
class
eval mvar
eval meta
meta
@message.sender
message.sender
sender_class
quit
exit
controller_name == "ngos"
controller_name
continue
@message.sender
receiver_class
continue
@sender
@receiver
@message.sender
@message
exit
continue
@receiver.class.to_s.downcase
@receiver.class.to_s
@receiver.class
@receiver
exit
request.original_url.include('ngo')
request.original_url
request.fullpath
@sender
continue
@sender
@receiver
message
continue
@sender
@message.sender
continue
@sender
@message.sender
continue
@sender
@message.sender
exit
@sender
@message.sender
exit
@sender
request.fullpath
params
@message.sender
@receiver
exit
@message
exit
@receiver.class.to_s.downcase
@receiver.class.to_s
@receiver.class
@receiver
exit
params
request
request.fullpath
exit
request.fullpath
@conversation
@message
@receiver
@sender
exit
@message
exit
request.fullpath[1]
request.fullpath
request.url
request.local?
request.request_parameters
request.request_parametersr
request.headers
request.original_url
request
current_view
controller_path
controller
current_controller
params
@conversation
@message
@receiver
exit
@conversation
@message.sender
@message
@receiver
@sender
quit
params[:ngo_id]
params
@ngo
q
params[:ngo_id]
params
current_user
@ngo
continue
params
